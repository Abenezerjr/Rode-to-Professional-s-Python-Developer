**Object-Oriented Programming (OOP)** in Python is a powerful paradigm that allows you to structure your code by bundling related properties and behaviors into individual objects. Let's dive into the basics:

1. **What Is OOP in Python?**
   - OOP is a way of organizing programs by modeling real-world entities as
    **objects**.
    Each object contains both:
    **data** (like raw materials in an assembly line) and
    **behavior** (actions performed by each assembly line component).
   - Think of a program as a factory assembly line, where each step processes material and transforms it into a finished product.
   - Properties and behaviors are bundled into individual objects, making code more modular and maintainable.

2. **Defining a Class: The Blueprint**
   - A **class** serves as a blueprint for creating objects. It defines the structure and behavior that objects of that type will have.
   - You can define a class using the `class` keyword, followed by the class name and a colon.
   - Example:
     ```python
     class Dog:
         def __init__(self, name):
             self.name = name

         def bark(self):
             print(f"{self.name} says woof!")
     ```

3. **Creating Objects (Instances)**
   - Once you have a class, you can create **instances** (objects) based on that blueprint.
   - Use the class name followed by parentheses to create an instance.
   - Example:
     ```python
     my_dog = Dog(name="Buddy")
     my_dog.bark()  # Output: "Buddy says woof!"
     ```

4. **Attributes and Methods**
   - **Attributes** are variables associated with an object (e.g., `name` in the `Dog` class).
   - **Methods** are functions associated with an object (e.g., `bark()` in the `Dog` class).

5. **Inheritance**
   - Inheritance allows you to create a new class based on an existing one (the **parent class**).
   - The new class (the **child class**) inherits attributes and methods from the parent class.
   - Example:
     ```python
     class Puppy(Dog):
         def play(self):
             print(f"{self.name} is playing fetch!")

     my_puppy = Puppy(name="Rocky")
     my_puppy.bark()  # Output: "Rocky says woof!"
     my_puppy.play()  # Output: "Rocky is playing fetch!"
     ```

6. **Polymorphism**
   - Polymorphism allows different classes to share the same method
   name but behave differently.
   - Example:
     ```python
     class Cat:
         def sound(self):
             print("Meow!")

     def make_sound(animal):
         animal.sound()

     my_cat = Cat()
     make_sound(my_dog)  # Output: "Buddy says woof!"
     make_sound(my_cat)  # Output: "Meow!"
     ```

Remember, OOP helps you create organized, reusable, and efficient code. Dive deeper into this fascinating world of Python OOP to build robust applications! üêç

Example : restaurant
that has three real world entities(class)
one: chef
2: waiter
   (1 joe
   2 don) object instance of class
3: cleaner
four: Manager

let say that were going to model a waiter:

what it has: (we call it attributes);- like variable it a variable attach particular object
is_holding_plate=True
tables_responsible=[4,5,6}

what it does: (we call it methods) :- it likes function, but we call it methods b/c it function that a particular modeled
def take_order(table,order):
   # takes order to chef
def take_payment(amount):
     #add money to a restaurant




